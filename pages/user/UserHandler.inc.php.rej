--- ojs-2.3.7/pages/user/UserHandler.inc.php	2012-03-15 10:19:29.000000000 -0700
+++ ojs-2.4.1/pages/user/UserHandler.inc.php	2012-10-02 17:07:08.000000000 -0700
@@ -12,20 +12,22 @@
  * @brief Handle requests for user functions.
  */
 
-import('lib.pkp.pages.user.PKPUserHandler');
+import('classes.handler.Handler');
 
-class UserHandler extends PKPUserHandler {
+class UserHandler extends Handler {
 	/**
 	 * Constructor
 	 **/
 	function UserHandler() {
-		parent::PKPUserHandler();
+		parent::Handler();
 	}
 
 	/**
 	 * Display user index page.
+	 * @param $args array
+	 * @param $request PKPRequest
 	 */
-	function index() {
+	function index($args, &$request) {
 		$this->validate();
 
 		$sessionManager =& SessionManager::getManager();
@@ -33,13 +35,13 @@
 
 		$roleDao =& DAORegistry::getDAO('RoleDAO');
 
-		$this->setupTemplate();
+		$this->setupTemplate($request);
 		$templateMgr =& TemplateManager::getManager();
 
-		$journal =& Request::getJournal();
+		$journal =& $request->getJournal();
 		$templateMgr->assign('helpTopicId', 'user.userHome');
 
-		$user =& Request::getUser();
+		$user =& $request->getUser();
 		$userId = $user->getId();
 
 		$setupIncomplete = array();
@@ -58,12 +60,12 @@
 				$journalId = $journal->getId();
 
 				// Determine if journal setup is incomplete, to provide a message for JM
-				$setupIncomplete[$journalId] = $this->checkIncompleteSetup($journal);
+				$setupIncomplete[$journalId] = $this->_checkIncompleteSetup($journal);
 
 				$roles =& $roleDao->getRolesByUserId($userId, $journalId);
 				if (!empty($roles)) {
 					$userJournals[] =& $journal;
-					$this->getRoleDataForJournal($userId, $journalId, $submissionsCount, $isValid);
+					$this->_getRoleDataForJournal($userId, $journalId, $submissionsCount, $isValid);
 				}
 
 				unset($journal);
@@ -76,20 +78,22 @@
 			$journalId = $journal->getId();
 
 			// Determine if journal setup is incomplete, to provide a message for JM
-			$setupIncomplete[$journalId] = $this->checkIncompleteSetup($journal);
+			$setupIncomplete[$journalId] = $this->_checkIncompleteSetup($journal);
 
 			$userJournals = array($journal);
 
-			$this->getRoleDataForJournal($userId, $journalId, $submissionsCount, $isValid);
+			$this->_getRoleDataForJournal($userId, $journalId, $submissionsCount, $isValid);
 
-			$subscriptionTypeDAO =& DAORegistry::getDAO('SubscriptionTypeDAO');
+			$subscriptionTypeDao =& DAORegistry::getDAO('SubscriptionTypeDAO');
 			$subscriptionsEnabled = $journal->getSetting('publishingMode') ==  PUBLISHING_MODE_SUBSCRIPTION
-				&& ($subscriptionTypeDAO->subscriptionTypesExistByInstitutional($journalId, false)
-					|| $subscriptionTypeDAO->subscriptionTypesExistByInstitutional($journalId, true)) ? true : false;
+				&& ($subscriptionTypeDao->subscriptionTypesExistByInstitutional($journalId, false)
+					|| $subscriptionTypeDao->subscriptionTypesExistByInstitutional($journalId, true)) ? true : false;
 			$templateMgr->assign('subscriptionsEnabled', $subscriptionsEnabled);
 
 			import('classes.payment.ojs.OJSPaymentManager');
-			$paymentManager =& OJSPaymentManager::getManager();
+			$paymentManager = new OJSPaymentManager($request);
+			$acceptGiftPayments = $paymentManager->acceptGiftPayments();
+			$templateMgr->assign('acceptGiftPayments', $acceptGiftPayments);
 			$membershipEnabled = $paymentManager->membershipEnabled();
 			$templateMgr->assign('membershipEnabled', $membershipEnabled);
 
@@ -111,23 +115,132 @@
 	}
 
 	/**
+	 * Display user gifts page
+	 * @param $args array
+	 * @param $request PKPRequest
+	 */
+	function gifts($args, $request) {
+		$this->validate();
+
+		$journal =& $request->getJournal();
+		if (!$journal) $request->redirect(null, 'user');
+
+		// Ensure gift payments are enabled
+		import('classes.payment.ojs.OJSPaymentManager');
+		$paymentManager = new OJSPaymentManager($request);
+		$acceptGiftPayments = $paymentManager->acceptGiftPayments();
+		if (!$acceptGiftPayments) $request->redirect(null, 'user');
+
+		$acceptGiftSubscriptionPayments = $paymentManager->acceptGiftSubscriptionPayments();
+		$journalId = $journal->getId();
+		$user =& $request->getUser();
+		$userId = $user->getId();
+
+		// Get user's redeemed and unreedemed gift subscriptions
+		$giftDao =& DAORegistry::getDAO('GiftDAO');
+		$giftSubscriptions =& $giftDao->getGiftsByTypeAndRecipient(
+			ASSOC_TYPE_JOURNAL,
+			$journalId,
+			GIFT_TYPE_SUBSCRIPTION,
+			$userId
+		);
+
+		$this->setupTemplate($request, true);
+		$templateMgr =& TemplateManager::getManager();
+
+		$templateMgr->assign('journalTitle', $journal->getLocalizedTitle());
+		$templateMgr->assign('journalPath', $journal->getPath());
+		$templateMgr->assign('acceptGiftSubscriptionPayments', $acceptGiftSubscriptionPayments);
+		$templateMgr->assign_by_ref('giftSubscriptions', $giftSubscriptions);
+		$templateMgr->display('user/gifts.tpl');
+
+	}
+
+	/**
+	 * User redeems a gift
+	 * @param $args array
+	 * @param $request PKPRequest
+	 */
+	function redeemGift($args, $request) {
+		$this->validate();
+
+		if (empty($args)) $request->redirect(null, 'user');
+
+		$journal =& $request->getJournal();
+		if (!$journal) $request->redirect(null, 'user');
+
+		// Ensure gift payments are enabled
+		import('classes.payment.ojs.OJSPaymentManager');
+		$paymentManager = new OJSPaymentManager($request);
+		$acceptGiftPayments = $paymentManager->acceptGiftPayments();
+		if (!$acceptGiftPayments) $request->redirect(null, 'user');
+
+		$journalId = $journal->getId();
+		$user =& $request->getUser();
+		$userId = $user->getId();
+		$giftId = isset($args[0]) ? (int) $args[0] : 0;
+
+		// Try to redeem the gift
+		$giftDao =& DAORegistry::getDAO('GiftDAO');
+		$status = $giftDao->redeemGift(
+			ASSOC_TYPE_JOURNAL,
+			$journalId,
+			$userId,
+			$giftId
+		);
+
+		// Report redeem status to user
+		import('classes.notification.NotificationManager');
+		$notificationManager = new NotificationManager();
+
+		switch ($status) {
+			case GIFT_REDEEM_STATUS_SUCCESS:
+				$notificationType = NOTIFICATION_TYPE_GIFT_REDEEM_STATUS_SUCCESS;
+				break;
+			case GIFT_REDEEM_STATUS_ERROR_NO_GIFT_TO_REDEEM:
+				$notificationType = NOTIFICATION_TYPE_GIFT_REDEEM_STATUS_ERROR_NO_GIFT_TO_REDEEM;
+				break;
+			case GIFT_REDEEM_STATUS_ERROR_GIFT_ALREADY_REDEEMED:
+				$notificationType = NOTIFICATION_TYPE_GIFT_REDEEM_STATUS_ERROR_GIFT_ALREADY_REDEEMED;
+				break;
+			case GIFT_REDEEM_STATUS_ERROR_GIFT_INVALID:
+				$notificationType = NOTIFICATION_TYPE_GIFT_REDEEM_STATUS_ERROR_GIFT_INVALID;
+				break;
+			case GIFT_REDEEM_STATUS_ERROR_SUBSCRIPTION_TYPE_INVALID:
+				$notificationType = NOTIFICATION_TYPE_GIFT_REDEEM_STATUS_ERROR_SUBSCRIPTION_TYPE_INVALID;
+				break;
+			case GIFT_REDEEM_STATUS_ERROR_SUBSCRIPTION_NON_EXPIRING:
+				$notificationType = NOTIFICATION_TYPE_GIFT_REDEEM_STATUS_ERROR_SUBSCRIPTION_NON_EXPIRING;
+				break;
+			default:
+				$notificationType = NOTIFICATION_TYPE_NO_GIFT_TO_REDEEM;
+		}
+
+		$user =& $request->getUser();
+
+		$notificationManager->createTrivialNotification($user->getId(), $notificationType);
+		$request->redirect(null, 'user', 'gifts');
+	}
+
+	/**
 	 * Display subscriptions page
-	 **/
-	function subscriptions() {
+	 * @param $args array
+	 * @param $request PKPRequest
+	 */
+	function subscriptions($args, &$request) {
 		$this->validate();
 
-		$journal =& Request::getJournal();
-		if (!$journal) Request::redirect(null, 'user');
-		if ($journal->getSetting('publishingMode') !=  PUBLISHING_MODE_SUBSCRIPTION)
-			Request::redirect(null, 'user');
+		$journal =& $request->getJournal();
+		if (!$journal) $request->redirect(null, 'user');
+		if ($journal->getSetting('publishingMode') !=  PUBLISHING_MODE_SUBSCRIPTION) $request->redirect(null, 'user');
 
 		$journalId = $journal->getId();
-		$subscriptionTypeDAO =& DAORegistry::getDAO('SubscriptionTypeDAO');
-		$individualSubscriptionTypesExist = $subscriptionTypeDAO->subscriptionTypesExistByInstitutional($journalId, false);
-		$institutionalSubscriptionTypesExist = $subscriptionTypeDAO->subscriptionTypesExistByInstitutional($journalId, true);
-		if (!$individualSubscriptionTypesExist && !$institutionalSubscriptionTypesExist) Request::redirect(null, 'user');
+		$subscriptionTypeDao =& DAORegistry::getDAO('SubscriptionTypeDAO');
+		$individualSubscriptionTypesExist = $subscriptionTypeDao->subscriptionTypesExistByInstitutional($journalId, false);
+		$institutionalSubscriptionTypesExist = $subscriptionTypeDao->subscriptionTypesExistByInstitutional($journalId, true);
+		if (!$individualSubscriptionTypesExist && !$institutionalSubscriptionTypesExist) $request->redirect(null, 'user');
 
-		$user =& Request::getUser();
+		$user =& $request->getUser();
 		$userId = $user->getId();
 
 		// Subscriptions contact and additional information
@@ -139,20 +252,20 @@
 		$subscriptionAdditionalInformation = $journal->getLocalizedSetting('subscriptionAdditionalInformation');
 		// Get subscriptions and options for current journal
 		if ($individualSubscriptionTypesExist) {
-			$subscriptionDAO =& DAORegistry::getDAO('IndividualSubscriptionDAO');
-			$userIndividualSubscription =& $subscriptionDAO->getSubscriptionByUserForJournal($userId, $journalId);
+			$subscriptionDao =& DAORegistry::getDAO('IndividualSubscriptionDAO');
+			$userIndividualSubscription =& $subscriptionDao->getSubscriptionByUserForJournal($userId, $journalId);
 		}
 
 		if ($institutionalSubscriptionTypesExist) {
-			$subscriptionDAO =& DAORegistry::getDAO('InstitutionalSubscriptionDAO');
-			$userInstitutionalSubscriptions =& $subscriptionDAO->getSubscriptionsByUserForJournal($userId, $journalId);
+			$subscriptionDao =& DAORegistry::getDAO('InstitutionalSubscriptionDAO');
+			$userInstitutionalSubscriptions =& $subscriptionDao->getSubscriptionsByUserForJournal($userId, $journalId);
 		}
 
 		import('classes.payment.ojs.OJSPaymentManager');
-		$paymentManager =& OJSPaymentManager::getManager();
+		$paymentManager = new OJSPaymentManager($request);
 		$acceptSubscriptionPayments = $paymentManager->acceptSubscriptionPayments();
 
-		$this->setupTemplate(true);
+		$this->setupTemplate($request, true);
 		$templateMgr =& TemplateManager::getManager();
 
 		$templateMgr->assign('subscriptionName', $subscriptionName);
@@ -180,7 +293,7 @@
 	 * @param $isValid array reference
 
 	 */
-	function getRoleDataForJournal($userId, $journalId, &$submissionsCount, &$isValid) {
+	function _getRoleDataForJournal($userId, $journalId, &$submissionsCount, &$isValid) {
 		if (Validation::isJournalManager($journalId)) {
 			$journalDao =& DAORegistry::getDAO('JournalDAO');
 			$isValid["JournalManager"][$journalId] = true;
@@ -230,7 +343,7 @@
 	 * @param $journal Object
 	 * @return boolean True iff setup is incomplete
 	 */
-	function checkIncompleteSetup($journal) {
+	function _checkIncompleteSetup($journal) {
 		if($journal->getLocalizedInitials() == "" || $journal->getSetting('contactEmail') == "" ||
 		   $journal->getSetting('contactName') == "" || $journal->getLocalizedSetting('abbreviation') == "") {
 			return true;
@@ -241,11 +354,11 @@
 	 * Change the locale for the current user.
 	 * @param $args array first parameter is the new locale
 	 */
-	function setLocale($args) {
-		$setLocale = isset($args[0]) ? $args[0] : null;
+	function setLocale($args, $request) {
+		$setLocale = array_shift($args);
 
-		$site =& Request::getSite();
-		$journal =& Request::getJournal();
+		$site =& $request->getSite();
+		$journal =& $request->getJournal();
 		if ($journal != null) {
 			$journalSupportedLocales = $journal->getSetting('supportedLocales');
 			if (!is_array($journalSupportedLocales)) {
@@ -254,30 +367,32 @@
 		}
 
 		if (AppLocale::isLocaleValid($setLocale) && (!isset($journalSupportedLocales) || in_array($setLocale, $journalSupportedLocales)) && in_array($setLocale, $site->getSupportedLocales())) {
-			$session =& Request::getSession();
+			$session =& $request->getSession();
 			$session->setSessionVar('currentLocale', $setLocale);
 		}
 
 		if(isset($_SERVER['HTTP_REFERER'])) {
-			Request::redirectUrl($_SERVER['HTTP_REFERER']);
+			$request->redirectUrl($_SERVER['HTTP_REFERER']);
 		}
 
-		$source = Request::getUserVar('source');
+		$source = $request->getUserVar('source');
 		if (isset($source) && !empty($source)) {
-			Request::redirectUrl(Request::getProtocol() . '://' . Request::getServerHost() . $source, false);
+			$request->redirectUrl($request->getProtocol() . '://' . $request->getServerHost() . $source, false);
 		}
 
-		Request::redirect(null, 'index');
+		$request->redirect(null, 'index');
 	}
 
 	/**
 	 * Become a given role.
+	 * @param $args array
+	 * @param $request PKPRequest
 	 */
-	function become($args) {
+	function become($args, &$request) {
 		parent::validate(true);
 
-		$journal =& Request::getJournal();
-		$user =& Request::getUser();
+		$journal =& $request->getJournal();
+		$user =& $request->getUser();
 
 		switch (array_shift($args)) {
 			case 'author':
@@ -291,7 +406,7 @@
 				$deniedKey = 'user.noRoles.regReviewerClosed';
 				break;
 			default:
-				Request::redirect(null, null, 'index');
+				$request->redirect(null, null, 'index');
 		}
 
 		if ($journal->getSetting($setting)) {
@@ -302,7 +417,7 @@
 
 			$roleDao =& DAORegistry::getDAO('RoleDAO');
 			$roleDao->insertRole($role);
-			Request::redirectUrl(Request::getUserVar('source'));
+			$request->redirectUrl($request->getUserVar('source'));
 		} else {
 			$templateMgr =& TemplateManager::getManager();
 			$templateMgr->assign('message', $deniedKey);
@@ -318,8 +433,8 @@
 	function authorizationDenied($args, &$request) {
 		$this->validate(true);
 		$authorizationMessage = htmlentities($request->getUserVar('message'));
-		$this->setupTemplate(true);
-		AppLocale::requireComponents(array(LOCALE_COMPONENT_PKP_USER));
+		$this->setupTemplate($request, true);
+		AppLocale::requireComponents(LOCALE_COMPONENT_PKP_USER);
 		$templateMgr =& TemplateManager::getManager();
 		$templateMgr->assign('message', $authorizationMessage);
 		return $templateMgr->display('common/message.tpl');
@@ -339,14 +454,15 @@
 
 	/**
 	 * Setup common template variables.
+	 * @param $request PKPRequest
 	 * @param $subclass boolean set to true if caller is below this handler in the hierarchy
 	 */
-	function setupTemplate($subclass = false) {
+	function setupTemplate(&$request, $subclass = false) {
 		parent::setupTemplate();
-		AppLocale::requireComponents(array(LOCALE_COMPONENT_OJS_AUTHOR, LOCALE_COMPONENT_OJS_EDITOR, LOCALE_COMPONENT_OJS_MANAGER));
+		AppLocale::requireComponents(LOCALE_COMPONENT_OJS_AUTHOR, LOCALE_COMPONENT_OJS_EDITOR, LOCALE_COMPONENT_OJS_MANAGER);
 		$templateMgr =& TemplateManager::getManager();
 		if ($subclass) {
-			$templateMgr->assign('pageHierarchy', array(array(Request::url(null, 'user'), 'navigation.user')));
+			$templateMgr->assign('pageHierarchy', array(array($request->url(null, 'user'), 'navigation.user')));
 		}
 	}
 
@@ -354,7 +470,7 @@
 	// Captcha
 	//
 
-	function viewCaptcha($args) {
+	function viewCaptcha($args, $request) {
 		$captchaId = (int) array_shift($args);
 		import('lib.pkp.classes.captcha.CaptchaManager');
 		$captchaManager = new CaptchaManager();
@@ -366,14 +482,16 @@
 				exit();
 			}
 		}
-		Request::redirect(null, 'user');
+		$request->redirect(null, 'user');
 	}
 
 	/**
 	 * View the public user profile for a user, specified by user ID,
 	 * if that user should be exposed for public view.
+	 * @param $args array
+	 * @param $request PKPRequest
 	 */
-	function viewPublicProfile($args) {
+	function viewPublicProfile($args, &$request) {
 		$this->validate(false);
 		$templateMgr =& TemplateManager::getManager();
 		$userId = (int) array_shift($args);
@@ -388,7 +506,7 @@
 			$accountIsVisible = true;
 		}
 
-		if(!$accountIsVisible) Request::redirect(null, 'index');
+		if(!$accountIsVisible) $request->redirect(null, 'index');
 
 		$userDao =& DAORegistry::getDAO('UserDAO');
 		$user =& $userDao->getUser($userId);
@@ -401,23 +519,27 @@
 	//
 	// Payments
 	//
-	function purchaseSubscription($args) {
+	/**
+	 * Purchase a subscription.
+	 * @param $args array
+	 * @param $request PKPRequest
+	 */
+	function purchaseSubscription($args, &$request) {
 		$this->validate();
 
-		if (empty($args)) Request::redirect(null, 'user');
+		if (empty($args)) $request->redirect(null, 'user');
 
-		$journal =& Request::getJournal();
-		if (!$journal) Request::redirect(null, 'user');
-		if ($journal->getSetting('publishingMode') != PUBLISHING_MODE_SUBSCRIPTION)
-			Request::redirect(null, 'user');
+		$journal =& $request->getJournal();
+		if (!$journal) $request->redirect(null, 'user');
+		if ($journal->getSetting('publishingMode') != PUBLISHING_MODE_SUBSCRIPTION) $request->redirect(null, 'user');
 
 		import('classes.payment.ojs.OJSPaymentManager');
-		$paymentManager =& OJSPaymentManager::getManager();
+		$paymentManager = new OJSPaymentManager($request);
 		$acceptSubscriptionPayments = $paymentManager->acceptSubscriptionPayments();
-		if (!$acceptSubscriptionPayments) Request::redirect(null, 'user');
+		if (!$acceptSubscriptionPayments) $request->redirect(null, 'user');
 
-		$this->setupTemplate(true);
-		$user =& Request::getUser();
+		$this->setupTemplate($request, true);
+		$user =& $request->getUser();
 		$userId = $user->getId();
 		$journalId = $journal->getId();
 
@@ -439,7 +561,7 @@
 		if (isset($subscriptionId)) {
 			// Ensure subscription to be updated is for this user
 			if (!$subscriptionDao->subscriptionExistsByUser($subscriptionId, $userId)) {
-				Request::redirect(null, 'user');
+				$request->redirect(null, 'user');
 			}
 
 			// Ensure subscription can be updated
@@ -452,23 +574,23 @@
 				SUBSCRIPTION_STATUS_AWAITING_MANUAL_PAYMENT
 			);
 
-			if (!in_array($subscriptionStatus, $validStatus)) Request::redirect(null, 'user');
+			if (!in_array($subscriptionStatus, $validStatus)) $request->redirect(null, 'user');
 
 			if ($institutional) {
-				$subscriptionForm = new UserInstitutionalSubscriptionForm($userId, $subscriptionId);
+				$subscriptionForm = new UserInstitutionalSubscriptionForm($request, $userId, $subscriptionId);
 			} else {
-				$subscriptionForm = new UserIndividualSubscriptionForm($userId, $subscriptionId);
+				$subscriptionForm = new UserIndividualSubscriptionForm($request, $userId, $subscriptionId);
 			}
 
 		} else {
 			if ($institutional) {
-				$subscriptionForm = new UserInstitutionalSubscriptionForm($userId);
+				$subscriptionForm = new UserInstitutionalSubscriptionForm($request, $userId);
 			} else {
 				// Ensure user does not already have an individual subscription
 				if ($subscriptionDao->subscriptionExistsByUserForJournal($userId, $journalId)) {
-					Request::redirect(null, 'user');
+					$request->redirect(null, 'user');
 				}
-				$subscriptionForm = new UserIndividualSubscriptionForm($userId);
+				$subscriptionForm = new UserIndividualSubscriptionForm($request, $userId);
 			}
 		}
 
@@ -476,23 +598,27 @@
 		$subscriptionForm->display();
 	}
 
-	function payPurchaseSubscription($args) {
+	/**
+	 * Pay for a subscription purchase.
+ 	 * @param $args array
+	 * @param $request PKPRequest
+	 */
+	function payPurchaseSubscription($args, &$request) {
 		$this->validate();
 
-		if (empty($args)) Request::redirect(null, 'user');
+		if (empty($args)) $request->redirect(null, 'user');
 
-		$journal =& Request::getJournal();
-		if (!$journal) Request::redirect(null, 'user');
-		if ($journal->getSetting('publishingMode') != PUBLISHING_MODE_SUBSCRIPTION)
-			Request::redirect(null, 'user');
+		$journal =& $request->getJournal();
+		if (!$journal) $request->redirect(null, 'user');
+		if ($journal->getSetting('publishingMode') != PUBLISHING_MODE_SUBSCRIPTION) $request->redirect(null, 'user');
 
 		import('classes.payment.ojs.OJSPaymentManager');
-		$paymentManager =& OJSPaymentManager::getManager();
+		$paymentManager = new OJSPaymentManager($request);
 		$acceptSubscriptionPayments = $paymentManager->acceptSubscriptionPayments();
-		if (!$acceptSubscriptionPayments) Request::redirect(null, 'user');
+		if (!$acceptSubscriptionPayments) $request->redirect(null, 'user');
 
-		$this->setupTemplate(true);
-		$user =& Request::getUser();
+		$this->setupTemplate($request, true);
+		$user =& $request->getUser();
 		$userId = $user->getId();
 		$journalId = $journal->getId();
 
@@ -514,7 +640,7 @@
 		if (isset($subscriptionId)) {
 			// Ensure subscription to be updated is for this user
 			if (!$subscriptionDao->subscriptionExistsByUser($subscriptionId, $userId)) {
-				Request::redirect(null, 'user');
+				$request->redirect(null, 'user');
 			}
 
 			// Ensure subscription can be updated
@@ -527,36 +653,36 @@
 				SUBSCRIPTION_STATUS_AWAITING_MANUAL_PAYMENT
 			);
 
-			if (!in_array($subscriptionStatus, $validStatus)) Request::redirect(null, 'user');
+			if (!in_array($subscriptionStatus, $validStatus)) $request->redirect(null, 'user');
 
 			if ($institutional) {
-				$subscriptionForm = new UserInstitutionalSubscriptionForm($userId, $subscriptionId);
+				$subscriptionForm = new UserInstitutionalSubscriptionForm($request, $userId, $subscriptionId);
 			} else {
-				$subscriptionForm = new UserIndividualSubscriptionForm($userId, $subscriptionId);
+				$subscriptionForm = new UserIndividualSubscriptionForm($request, $userId, $subscriptionId);
 			}
 
 		} else {
 			if ($institutional) {
-				$subscriptionForm = new UserInstitutionalSubscriptionForm($userId);
+				$subscriptionForm = new UserInstitutionalSubscriptionForm($request, $userId);
 			} else {
 				// Ensure user does not already have an individual subscription
 				if ($subscriptionDao->subscriptionExistsByUserForJournal($userId, $journalId)) {
-					Request::redirect(null, 'user');
+					$request->redirect(null, 'user');
 				}
-				$subscriptionForm = new UserIndividualSubscriptionForm($userId);
+				$subscriptionForm = new UserIndividualSubscriptionForm($request, $userId);
 			}
 		}
 
 		$subscriptionForm->readInputData();
 
 		// Check for any special cases before trying to save
-		if (Request::getUserVar('addIpRange')) {
+		if ($request->getUserVar('addIpRange')) {
 			$editData = true;
 			$ipRanges = $subscriptionForm->getData('ipRanges');
 			$ipRanges[] = '';
 			$subscriptionForm->setData('ipRanges', $ipRanges);
 
-		} else if (($delIpRange = Request::getUserVar('delIpRange')) && count($delIpRange) == 1) {
+		} else if (($delIpRange = $request->getUserVar('delIpRange')) && count($delIpRange) == 1) {
 			$editData = true;
 			list($delIpRange) = array_keys($delIpRange);
 			$delIpRange = (int) $delIpRange;
@@ -576,23 +702,27 @@
 		}
 	}
 
-	function completePurchaseSubscription($args) {
+	/**
+	 * Complete the purchase subscription process.
+	 * @param $args array
+	 * @param $request PKPRequest
+	 */
+	function completePurchaseSubscription($args, &$request) {
 		$this->validate();
 
-		if (count($args) != 2) Request::redirect(null, 'user');
+		if (count($args) != 2) $request->redirect(null, 'user');
 
-		$journal =& Request::getJournal();
-		if (!$journal) Request::redirect(null, 'user');
-		if ($journal->getSetting('publishingMode') != PUBLISHING_MODE_SUBSCRIPTION)
-			Request::redirect(null, 'user');
+		$journal =& $request->getJournal();
+		if (!$journal) $request->redirect(null, 'user');
+		if ($journal->getSetting('publishingMode') != PUBLISHING_MODE_SUBSCRIPTION) $request->redirect(null, 'user');
 
 		import('classes.payment.ojs.OJSPaymentManager');
-		$paymentManager =& OJSPaymentManager::getManager();
+		$paymentManager = new OJSPaymentManager($request);
 		$acceptSubscriptionPayments = $paymentManager->acceptSubscriptionPayments();
-		if (!$acceptSubscriptionPayments) Request::redirect(null, 'user');
+		if (!$acceptSubscriptionPayments) $request->redirect(null, 'user');
 
-		$this->setupTemplate(true);
-		$user =& Request::getUser();
+		$this->setupTemplate($request, true);
+		$user =& $request->getUser();
 		$userId = $user->getId();
 		$journalId = $journal->getId();
 
@@ -600,22 +730,22 @@
 		$subscriptionId = (int) array_shift($args);
 
 		if ($institutional == 'institutional') {
-			$subscriptionDAO =& DAORegistry::getDAO('InstitutionalSubscriptionDAO');
+			$subscriptionDao =& DAORegistry::getDAO('InstitutionalSubscriptionDAO');
 		} else {
-			$subscriptionDAO =& DAORegistry::getDAO('IndividualSubscriptionDAO');
+			$subscriptionDao =& DAORegistry::getDAO('IndividualSubscriptionDAO');
 		}
 
-		if (!$subscriptionDAO->subscriptionExistsByUser($subscriptionId, $userId)) Request::redirect(null, 'user');
+		if (!$subscriptionDao->subscriptionExistsByUser($subscriptionId, $userId)) $request->redirect(null, 'user');
 
-		$subscription =& $subscriptionDAO->getSubscription($subscriptionId);
+		$subscription =& $subscriptionDao->getSubscription($subscriptionId);
 		$subscriptionStatus = $subscription->getStatus();
 		import('classes.subscription.Subscription');
 		$validStatus = array(SUBSCRIPTION_STATUS_ACTIVE, SUBSCRIPTION_STATUS_AWAITING_ONLINE_PAYMENT);
 
-		if (!in_array($subscriptionStatus, $validStatus)) Request::redirect(null, 'user');
+		if (!in_array($subscriptionStatus, $validStatus)) $request->redirect(null, 'user');
 
-		$subscriptionTypeDAO =& DAORegistry::getDAO('SubscriptionTypeDAO');
-		$subscriptionType =& $subscriptionTypeDAO->getSubscriptionType($subscription->getTypeId());
+		$subscriptionTypeDao =& DAORegistry::getDAO('SubscriptionTypeDAO');
+		$subscriptionType =& $subscriptionTypeDao->getSubscriptionType($subscription->getTypeId());
 
 		$queuedPayment =& $paymentManager->createQueuedPayment($journal->getId(), PAYMENT_TYPE_PURCHASE_SUBSCRIPTION, $user->getId(), $subscriptionId, $subscriptionType->getCost(), $subscriptionType->getCurrencyCodeAlpha());
 		$queuedPaymentId = $paymentManager->queuePayment($queuedPayment);
@@ -623,23 +753,27 @@
 		$paymentManager->displayPaymentForm($queuedPaymentId, $queuedPayment);
 	}
 
-	function payRenewSubscription($args) {
+	/**
+	 * Pay the "renew subscription" fee.
+	 * @param $args array
+	 * @param $request PKPRequest
+	 */
+	function payRenewSubscription($args, &$request) {
 		$this->validate();
 
-		if (count($args) != 2) Request::redirect(null, 'user');
+		if (count($args) != 2) $request->redirect(null, 'user');
 
-		$journal =& Request::getJournal();
-		if (!$journal) Request::redirect(null, 'user');
-		if ($journal->getSetting('publishingMode') != PUBLISHING_MODE_SUBSCRIPTION)
-			Request::redirect(null, 'user');
+		$journal =& $request->getJournal();
+		if (!$journal) $request->redirect(null, 'user');
+		if ($journal->getSetting('publishingMode') != PUBLISHING_MODE_SUBSCRIPTION) $request->redirect(null, 'user');
 
 		import('classes.payment.ojs.OJSPaymentManager');
-		$paymentManager =& OJSPaymentManager::getManager();
+		$paymentManager = new OJSPaymentManager($request);
 		$acceptSubscriptionPayments = $paymentManager->acceptSubscriptionPayments();
-		if (!$acceptSubscriptionPayments) Request::redirect(null, 'user');
+		if (!$acceptSubscriptionPayments) $request->redirect(null, 'user');
 
-		$this->setupTemplate(true);
-		$user =& Request::getUser();
+		$this->setupTemplate($request, true);
+		$user =& $request->getUser();
 		$userId = $user->getId();
 		$journalId = $journal->getId();
 
@@ -647,16 +781,16 @@
 		$subscriptionId = (int) array_shift($args);
 
 		if ($institutional == 'institutional') {
-			$subscriptionDAO =& DAORegistry::getDAO('InstitutionalSubscriptionDAO');
+			$subscriptionDao =& DAORegistry::getDAO('InstitutionalSubscriptionDAO');
 		} else {
-			$subscriptionDAO =& DAORegistry::getDAO('IndividualSubscriptionDAO');
+			$subscriptionDao =& DAORegistry::getDAO('IndividualSubscriptionDAO');
 		}
 
-		if (!$subscriptionDAO->subscriptionExistsByUser($subscriptionId, $userId)) Request::redirect(null, 'user');
+		if (!$subscriptionDao->subscriptionExistsByUser($subscriptionId, $userId)) $request->redirect(null, 'user');
 
-		$subscription =& $subscriptionDAO->getSubscription($subscriptionId);
+		$subscription =& $subscriptionDao->getSubscription($subscriptionId);
 
-		if ($subscription->isNonExpiring()) Request::redirect(null, 'user');
+		if ($subscription->isNonExpiring()) $request->redirect(null, 'user');
 
 		import('classes.subscription.Subscription');
 		$subscriptionStatus = $subscription->getStatus();
@@ -666,10 +800,10 @@
 			SUBSCRIPTION_STATUS_AWAITING_MANUAL_PAYMENT
 		);
 
-		if (!in_array($subscriptionStatus, $validStatus)) Request::redirect(null, 'user');
+		if (!in_array($subscriptionStatus, $validStatus)) $request->redirect(null, 'user');
 
-		$subscriptionTypeDAO =& DAORegistry::getDAO('SubscriptionTypeDAO');
-		$subscriptionType =& $subscriptionTypeDAO->getSubscriptionType($subscription->getTypeId());
+		$subscriptionTypeDao =& DAORegistry::getDAO('SubscriptionTypeDAO');
+		$subscriptionType =& $subscriptionTypeDao->getSubscriptionType($subscription->getTypeId());
 
 		$queuedPayment =& $paymentManager->createQueuedPayment($journal->getId(), PAYMENT_TYPE_RENEW_SUBSCRIPTION, $user->getId(), $subscriptionId, $subscriptionType->getCost(), $subscriptionType->getCurrencyCodeAlpha());
 		$queuedPaymentId = $paymentManager->queuePayment($queuedPayment);
@@ -677,15 +811,20 @@
 		$paymentManager->displayPaymentForm($queuedPaymentId, $queuedPayment);
 	}
 
-	function payMembership($args) {
+	/**
+	 * Pay for a membership.
+	 * @param $args array
+	 * @param $request PKPRequest
+	 */
+	function payMembership($args, &$request) {
 		$this->validate();
-		$this->setupTemplate();
+		$this->setupTemplate($request);
 
 		import('classes.payment.ojs.OJSPaymentManager');
-		$paymentManager =& OJSPaymentManager::getManager();
+		$paymentManager = new OJSPaymentManager($request);
 
-		$journal =& Request::getJournal();
-		$user =& Request::getUser();
+		$journal =& $request->getJournal();
+		$user =& $request->getUser();
 
 		$queuedPayment =& $paymentManager->createQueuedPayment($journal->getId(), PAYMENT_TYPE_MEMBERSHIP, $user->getId(), null,  $journal->getSetting('membershipFee'));
 		$queuedPaymentId = $paymentManager->queuePayment($queuedPayment);
